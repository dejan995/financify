# Production docker-compose file
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  finance-app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
      target: runner
    environment:
      - NODE_ENV=production
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/initialization/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-finance_db}
      - POSTGRES_USER=${POSTGRES_USER:-finance_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finance_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../deployment/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ../deployment/ssl:/etc/nginx/ssl:ro
    depends_on:
      - finance-app
    restart: always
    networks:
      - finance-network